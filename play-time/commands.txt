kubectl create -f pod-definition.yml

Kevins-MacBook-Air:play-time kwood$ kubectl get pods
NAME                    READY   STATUS    RESTARTS      AGE
myapp-pod               1/1     Running   0             8s
nginx-55f598f8d-h9md4   1/1     Running   1 (47m ago)   32d

kubectl describe pod myapp-pod


evins-MacBook-Air:play-time kwood$ kubectl get replicationcontroller
NAME       DESIRED   CURRENT   READY   AGE
myapp-rc   3         3         3       49s


kubectl replace -f replicaset-definition.yaml

Kevins-MacBook-Air:play-time kwood$ kubectl get replicaset
NAME               DESIRED   CURRENT   READY   AGE
myapp-replicaset   6         6         6       5m55s

kubectl scale --replicas=3 replicaset myapp-replicaset
kubectl scale --replicas=3 -f replicaset-definition.yaml

kubectl edit rs new-replica-set

specify namespace with creating pod:

kubectl create namespace dev

kubectl create -f pod-definition.yml --namespace=dev

kubectl get pods --namespace=dev

Switch to another namespace:
kubectl config set-context $(kubectl config current-context) --namespace=dev

View pods in all namespaces:
kubectl get pods --all-namespaces

Imperative:

kubectl replace -f nginx.yaml   -> to update an object
kubectl replace --force -f nginx.yaml  -> delets object and then recreates it.

Create an NGINX Pod
kubectl run nginx-pod --image=nginx:alpine
kubectl run httpd --image=httpd:alpine --port=80 --expose=true


Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml
kubectl run redis --image=redis:alpine --dry-run=client -o yaml

Create a deployment
kubectl create deployment --image=nginx nginx
kubectl run custom-nginx --image=nginx --port=8080


Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml


Generate Deployment with 4 Replicas
kubectl create deployment nginx --image=nginx --replicas=4

kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3

You can also scale a deployment using the kubectl scale command.
kubectl scale deployment nginx --replicas=4

Another way to do this is to save the YAML definition to a file and modify
kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml


Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod custom-nginx --port=8080 --name custom-nginx-service --dry-run=client -o yaml


kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml 

(This will not use the pods labels as selectors, 
instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well 
if your pod has a different label set. So generate the file and modify the selectors before creating the service)


Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:

kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. 
You have to generate a definition file and then add the node port in manually before creating the service with the pod.)


kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)

Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot 
accept a node port. I would recommend going with the kubectl expose command. If you need to specify a node port, 
generate a definition file using the same command and manually input the nodeport before creating the service.


Reference:
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands

https://kubernetes.io/docs/reference/kubectl/conventions/


Declaritive

kubectl apply -f nginx.yml   -> wiill update and create object if it does not exist
kubectl apply -f /path/to/config-files   -> can point at directory and it will apply all *.yml in that directory


https://kubernetes.io/docs/reference/kubectl/conventions/

Create an NGINX Pod

kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml

Create a deployment

kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

Make necessary changes to the file (for example, adding more replicas) and then create the deployment.

kubectl create -f nginx-deployment.yaml



OR

In k8s version 1.19+, we can specify the --replicas option to create a deployment with 4 replicas.

kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml


-----------------------------Scheduler---------------------------------

Manually:

Run the command: kubectl get pods --namespace kube-system
to see the status of scheduler pod. We have removed the scheduler from this Kubernetes cluster. 
As a result, as it stands, the pod will remain in a pending state forever.

controlplane ~ ➜  more nginx.yaml 
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  -  image: nginx
     name: nginx
  nodeName: controlplane


Labels and Selectors:

  kubectl get pods --selector app=App1

  list all objects:
  kubectl get all --selector env=prod --no-headers | wc -l

  controlplane ~ ➜  kubectl get all --selector env=prod,bu=finance,tier=frontend
NAME              READY   STATUS    RESTARTS   AGE
pod/app-1-zzxdf   1/1     Running   0          3m11s

Taints and Tolerations:

Taints are added to nodes:

kubectl taint nodes node-name key=value:taint-effect

What happens to PODs that Do not tolerate this taint  NoSchedule,PreferNoSchedule,NoExecute

kubectl taint nodes node1 app=blue:NoSchedule


Tolerations are added to pods

pod definition under spec:

tolerations:
- key:"app"
  operator:"Equal"
  value:"blue"
  effect:"NoSchedule"


to see the tain on the master node
kubectl describe node kubemastrer | grep Taint